<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="KsCs_Message" xml:space="preserve">
    <value>Basándose en el éxito de nuestra serie KS original y su aclamado sonido, la &lt;strong&gt;Serie KS CS&lt;/strong&gt;  ofrece a los clientes un nuevo beneficio significativo: la habilidad de crear su propio sonido para el gabinete vía puerto Ethernet y utilizando la aplicación para iOS disponible gratuitamente en nuestro website www.topppro.com.&lt;br /&gt;&lt;br/&gt;La serie &lt;strong&gt;KS CS&lt;/strong&gt; está conformada por gabinetes activos de madera acabados en pintura profesional con un procesador DSP incorporado. Se encuentran disponibles gabinetes activos de 8”, 10”, 12”, 15”, 2 x 15” y Sub bajos Activos de 15”, de 18” y 2 x 18".&lt;br /&gt;&lt;br/&gt;Todo alimentado por nuestro amplificador de vanguardia que ofrece hasta 4000 Watts (programa) y capaz de producir hasta 133dB, con DSP muy limpio – y reproducción de graves mejorada.</value>
  </data>
  <data name="Ks_Message" xml:space="preserve">
    <value>Building on the success of our original KS Series &amp; their highly acclaimed signature sound, &lt;strong&gt;KS CS Series&lt;/strong&gt; offers customers two new significant benefits: The ability to create your own sound voicing for the cabinet via Ethernet port or Wi-Fi, and the ability to receive wireless audio.&lt;br /&gt;&lt;br/&gt;&lt;strong&gt;KS CS Series&lt;/strong&gt; includes a series of professionally painted active wood cabinets with onboard DSP processor, available in 8” Active, 10” Active, 12” Active, 15” Active, 215” Active, 15” Active SUB &amp; 18” Active SUB. All powered by our state-of-the-art amplifier offering up to 2000 Watts* &lt;em&gt;(peak) &lt;/em&gt; and capable of producing up to 132db SPL, with very transparent highs, very precise mids &amp; very clean DSP-Enhanced bass reproduction.&lt;br /&gt;&lt;br/&gt;&lt;strong&gt;KS CS&lt;/strong&gt; uses a modular approach which allows the user to add the CS Custom Sound module or the Wi-Fi Audio Receiver module to their cabinet allowing them to customize the cabinet to maximize their application needs, our modular architecture provides these cabinets with great flexibility today &amp;amp; keeps a window open to future expandability. The cabinets come with a FLAT setting, Loudness &amp; user setting.</value>
  </data>
  <data name="Ks_Subtitle" xml:space="preserve">
    <value>Presentando: &lt;strong&gt;La Serie KS CS de Topp Pro&lt;/strong&gt;</value>
  </data>
  <data name="Ks_Title" xml:space="preserve">
    <value>Su Sonido...&lt;br /&gt;Sin Cables!</value>
  </data>
  <data name="SArray_Message" xml:space="preserve">
    <value>Disponible en dos versiones: una para gabinetes pasivos y la otra para los activos. Permite montar 2 gabinetes i28H sobre un sub bajo de Topp Pro. El soporte combina dos gabinetes satélite i28H montados de manera similar a un arreglo en línea permitiendo el ajuste en múltiples ángulos, entregando de esa manera una cobertura versátil y específica de acuerdo a la aplicación.</value>
  </data>
</root>