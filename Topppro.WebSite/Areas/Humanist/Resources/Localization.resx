<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add_To_Compare" xml:space="preserve">
    <value>Compare</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>BACK</value>
  </data>
  <data name="Compare_Panel_Clear_Button" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="Compare_Panel_Compare_Button" xml:space="preserve">
    <value>Compare</value>
  </data>
  <data name="Compare_Panel_Title" xml:space="preserve">
    <value>Items To Compare</value>
  </data>
  <data name="Error_Message" xml:space="preserve">
    <value>We apologize for your inconvenience, but this request could not be processed.</value>
  </data>
  <data name="Error_Title" xml:space="preserve">
    <value>That's an error.</value>
  </data>
  <data name="HiRes_Pics" xml:space="preserve">
    <value>Hi-Res Pics</value>
  </data>
  <data name="Mixers_Detail_Dmx244_Firmware_Download" xml:space="preserve">
    <value>Download here the DMX24.4 Firmware Update (v 2.9) 16mb</value>
  </data>
  <data name="Mixers_Detail_Dmx244_Firmware_Instructions" xml:space="preserve">
    <value>DMX24.4 Firmware Update Instructions</value>
  </data>
  <data name="Mixers_Detail_Dmx244_Message" xml:space="preserve">
    <value>Our new digital mixer is designed primarily for LIVE Audio Applications for the customer who wants all the power &amp; convenience digital processing &amp; instant recall offers, without giving up the familiarity, affordability &amp; ease of use of a traditional analog-style live mixer. Our digital mixer is powerful, affordable &amp; very easy to use!</value>
  </data>
  <data name="Mixers_Index_Mx_Bluetooth" xml:space="preserve">
    <value>&lt;strong&gt;BLUETOOTH!! &lt;/strong&gt;NOW AVAILABLE  WITH ORDER</value>
  </data>
  <data name="Mixers_Index_Mx_Digital_Live_Mixing" xml:space="preserve">
    <value>Designed for live mixing</value>
  </data>
  <data name="Modules_HiRes_E_Cs" xml:space="preserve">
    <value>&lt;b&gt;E-CS&lt;/b&gt; Ethernet Module.</value>
  </data>
  <data name="Modules_HiRes_Tac_Ark" xml:space="preserve">
    <value>&lt;b&gt;TAC-ARK&lt;/b&gt; Microphone Preamplifier</value>
  </data>
  <data name="Modules_HiRes_Tac_Bt2" xml:space="preserve">
    <value>&lt;b&gt;TAC-BT2.1B&lt;/b&gt; Bluetooth Audio Receiver.</value>
  </data>
  <data name="Modules_HiRes_Tac_Mp3_R" xml:space="preserve">
    <value>&lt;b&gt;TAC-MP3-R&lt;/b&gt; Records sounds to an USB key.</value>
  </data>
  <data name="Modules_HiRes_Tac_Mp3_S" xml:space="preserve">
    <value>&lt;b&gt;TAC-MP3-S&lt;/b&gt; Displays song title on display.</value>
  </data>
  <data name="Modules_HiRes_Tac_Mp3_T" xml:space="preserve">
    <value>&lt;b&gt;TAC-MP3-T&lt;/b&gt; Displays track number on display.</value>
  </data>
  <data name="Modules_HiRes_Tac_Mx_Dsp" xml:space="preserve">
    <value>&lt;b&gt;TAC-MX DSP&lt;/b&gt; 24-Bit FX Processor.</value>
  </data>
  <data name="Modules_HiRes_Tac_Mx_Eq" xml:space="preserve">
    <value>&lt;b&gt;TAC-MX EQ&lt;/b&gt; 9 Band Graphic EQ.</value>
  </data>
  <data name="Modules_HiRes_Tac_Tmw" xml:space="preserve">
    <value>&lt;b&gt;TAC-TMW 2.4R&lt;/b&gt; 2.4GHz Digital Wireless Receiver.</value>
  </data>
  <data name="Packs_Index_i4K_2000W" xml:space="preserve">
    <value>2000W class D amplification</value>
  </data>
  <data name="Packs_Index_Soho_Message" xml:space="preserve">
    <value>Our new &lt;b&gt;SOHO V4/8&lt;/b&gt; systems offer   uncompromising high quality pro audio in a highly efficient low profile footprint. The perfect choice for intimate to mid size spaces for groups or installation. With its sleek modern look, wood satellite columns and subwoofer finished in our special &lt;b&gt;SOHO&lt;/b&gt; paint process, and with an impressive total of 1400W (peak) in a stereo configuration, &lt;b&gt;SOHO&lt;/b&gt; excels where it counts, in the way it sounds. &lt;br/&gt;&lt;br/&gt; Available in two configurations,   &lt;b&gt;SOHO V4 &lt;/b&gt;with four 3.5” high definition speakers per satellite column, and &lt;b&gt;SOHO V8&lt;/b&gt; with eight. Both are powered by the &lt;b&gt;SOHO 12A&lt;/b&gt; Power Hub subwoofer. &lt;b&gt;SOHO&lt;/b&gt; Systems uses the same modular approach as KS CS Series which allows the user to add the CS Custom Sound module or the Wi-Fi Audio receiver module to their cabinet, allowing them to customize the cabinet to maximize their application needs. Our modular architecture provides these cabinets with great flexibility today, while keeping a window open to future expandability.&lt;br/&gt;&lt;br/&gt; With lots of headroom, clean tight bass, and precise mids &amp; pristine highs,   &lt;b&gt;SOHO&lt;/b&gt; offers a very impressive entry into the low profile pro audio   classification. Focusing first on sound and second on complementing the look of the stage or install without getting in the way of the performance. Compact, very easy to setup &amp; carry, providing convenience without compromising sound quality.</value>
  </data>
  <data name="Packs_Index_Soho_Subtitle" xml:space="preserve">
    <value>Introducing: &lt;b&gt;Topp Pro SOHO V4/V8 PA Systems&lt;/b&gt;</value>
  </data>
  <data name="Packs_Index_Soho_Title" xml:space="preserve">
    <value>Your Sound…&lt;br /&gt;No Strings Attached!</value>
  </data>
  <data name="Processors_Index_Tac_Compatibility" xml:space="preserve">
    <value>TAC Modules are compatible with the following models</value>
  </data>
  <data name="Remove_From_Compare" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="Speakers_Detail_SArray_Message" xml:space="preserve">
    <value>Available in 2 versions: one for Passive and the other for Active enclosures. Allows mounting 2 x i28H cabinets on a Topp Pro subwoofer.&lt;br/&gt;
The bracket combines two i28H satellite cabinets mounted on a custom tooled array-style bracket (which allows multi-angle positioning of the two satellites) providing a very versatile application-specific coverage.</value>
  </data>
  <data name="Speakers_Index_Ks_Message" xml:space="preserve">
    <value>Building on the success of our original KS Series &amp; their highly acclaimed signature sound, &lt;strong&gt;KS CS Series&lt;/strong&gt; offers customers two new significant benefits: The ability to create your own sound voicing for the cabinet via Ethernet port or Wi-Fi, and the ability to receive wireless audio.&lt;br /&gt;&lt;strong&gt;KS CS Series&lt;/strong&gt; includes a series of professionally painted active wood cabinets with onboard DSP processor, available in 8” Active, 10” Active, 12” Active, 15” Active, 215” Active, 15” Active SUB &amp; 18” Active SUB. All powered by our state-of-the-art amplifier offering up to 2000 Watts* &lt;em&gt;(peak) &lt;/em&gt; and capable of producing up to 132db SPL, with very transparent highs, very precise mids &amp; very clean DSP-Enhanced bass reproduction.&lt;br /&gt;&lt;strong&gt;KS CS&lt;/strong&gt; uses a modular approach which allows the user to add the CS Custom Sound module or the Wi-Fi Audio Receiver module to their cabinet allowing them to customize the cabinet to maximize their application needs, our modular architecture provides these cabinets with great flexibility today &amp;amp; keeps a window open to future expandability. The cabinets come with a FLAT setting, Loudness &amp; user setting.</value>
  </data>
  <data name="Speakers_Index_Ks_Subtitle" xml:space="preserve">
    <value>Introducing: &lt;strong&gt;Topp Pro KS CS Series&lt;/strong&gt;</value>
  </data>
  <data name="Speakers_Index_Ks_Title" xml:space="preserve">
    <value>Your Sound…&lt;br /&gt;No Strings Attached!</value>
  </data>
  <data name="User_Manual" xml:space="preserve">
    <value>User Manual</value>
  </data>
</root>