//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Xml.Serialization;


namespace Topppro.Entities
{
    [Serializable]
    public partial class Culture
    {
        #region Primitive Properties
    
        public virtual int CultureId
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	//[XmlElement("Distributors", typeof(Collection<Distributor>))]
        public virtual ICollection<Distributor> Distributors
        {
            get
            {
                if (_distributors == null)
                {
                    var newCollection = new FixupCollection<Distributor>();
                    newCollection.CollectionChanged += FixupDistributors;
                    _distributors = newCollection;
                }
                return _distributors;
            }
            set
            {
                if (!ReferenceEquals(_distributors, value))
                {
                    var previousValue = _distributors as FixupCollection<Distributor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDistributors;
                    }
                    _distributors = value;
                    var newValue = value as FixupCollection<Distributor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDistributors;
                    }
                }
            }
        }
    	//[XmlElement("Distributors", typeof(Collection<Distributor>))]
        private ICollection<Distributor> _distributors;
    
    	//[XmlElement("Bullets", typeof(Collection<Bullet>))]
        public virtual ICollection<Bullet> Bullets
        {
            get
            {
                if (_bullets == null)
                {
                    var newCollection = new FixupCollection<Bullet>();
                    newCollection.CollectionChanged += FixupBullets;
                    _bullets = newCollection;
                }
                return _bullets;
            }
            set
            {
                if (!ReferenceEquals(_bullets, value))
                {
                    var previousValue = _bullets as FixupCollection<Bullet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBullets;
                    }
                    _bullets = value;
                    var newValue = value as FixupCollection<Bullet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBullets;
                    }
                }
            }
        }
    	//[XmlElement("Bullets", typeof(Collection<Bullet>))]
        private ICollection<Bullet> _bullets;
    
    	//[XmlElement("Attributes", typeof(Collection<Attribute>))]
        public virtual ICollection<Attribute> Attributes
        {
            get
            {
                if (_attributes == null)
                {
                    var newCollection = new FixupCollection<Attribute>();
                    newCollection.CollectionChanged += FixupAttributes;
                    _attributes = newCollection;
                }
                return _attributes;
            }
            set
            {
                if (!ReferenceEquals(_attributes, value))
                {
                    var previousValue = _attributes as FixupCollection<Attribute>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttributes;
                    }
                    _attributes = value;
                    var newValue = value as FixupCollection<Attribute>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttributes;
                    }
                }
            }
        }
    	//[XmlElement("Attributes", typeof(Collection<Attribute>))]
        private ICollection<Attribute> _attributes;
    
    	//[XmlElement("Downloads", typeof(Collection<Download>))]
        public virtual ICollection<Download> Downloads
        {
            get
            {
                if (_downloads == null)
                {
                    var newCollection = new FixupCollection<Download>();
                    newCollection.CollectionChanged += FixupDownloads;
                    _downloads = newCollection;
                }
                return _downloads;
            }
            set
            {
                if (!ReferenceEquals(_downloads, value))
                {
                    var previousValue = _downloads as FixupCollection<Download>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDownloads;
                    }
                    _downloads = value;
                    var newValue = value as FixupCollection<Download>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDownloads;
                    }
                }
            }
        }
    	//[XmlElement("Downloads", typeof(Collection<Download>))]
        private ICollection<Download> _downloads;

        #endregion

        #region Association Fixup
    
        private void FixupDistributors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Distributor item in e.NewItems)
                {
                    item.Culture = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Distributor item in e.OldItems)
                {
                    if (ReferenceEquals(item.Culture, this))
                    {
                        item.Culture = null;
                    }
                }
            }
        }
    
        private void FixupBullets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Bullet item in e.NewItems)
                {
                    item.Culture = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Bullet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Culture, this))
                    {
                        item.Culture = null;
                    }
                }
            }
        }
    
        private void FixupAttributes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Attribute item in e.NewItems)
                {
                    item.Culture = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attribute item in e.OldItems)
                {
                    if (ReferenceEquals(item.Culture, this))
                    {
                        item.Culture = null;
                    }
                }
            }
        }
    
        private void FixupDownloads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Download item in e.NewItems)
                {
                    item.Culture = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Download item in e.OldItems)
                {
                    if (ReferenceEquals(item.Culture, this))
                    {
                        item.Culture = null;
                    }
                }
            }
        }

        #endregion

    }
}
